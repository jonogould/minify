#!/usr/bin/env node
// vim: ft=javascript

// node modules
var fs = require('fs');

// npm modules
var app = require('commander');
var _ = require('underscore');
var clc = require('cli-color');
var shell = require('shelljs');

// app modules
var util = require('minify-util');
var package = JSON.parse(fs.readFileSync(__dirname + '/package.json', 'utf-8'));

app
	.version(package.version)
	.option('-o, --output [path]', 'specify an output path (optional)')
	.option('-g, --git-hash', 'prepends the abbreviated git commit hash to the output filename')
	.option('-c, --content-hash', 'prepends an abbreviated hash based on the minified output')
	.option('-a, --append [string]', 'append a custom string to the output filename [.min]', '.min')
	.option('-v, --verbose', 'write verbose output', false)
	.parse(process.argv);

// set dirname
app.__dirname = __dirname;

// show help if there aren't any input files specified
if (app.args.length === 0)
{
	app.help();
	process.exit(1);
}

// check for command-line tools
_.each(['git', 'jpegtran', 'optipng'], function (prereq)
{
	if ( shell.which(prereq) ) return;
	console.log('oops, please install ' + prereq);
	process.exit(1);
});

var supported = ['js', 'css', 'php', 'html', 'png', 'jpeg', 'jpg'];

_.each(app.args, function (file) {

	// first, make sure file exists
	// and that it's actually a file

	try {
		var stat = fs.statSync(file);
		if (! stat.isFile())
		{
			console.log(clc.red('ERROR ') + '"' + file + '" is an invalid file');
			return;
		}
	} catch (er) {
		console.log(clc.red('ERROR ') + '"' + file + '" is an invalid file');
		return;
	}

	var extension = _.last(file.split('.'));

	// make sure filetype is supported
	if (! _.contains(supported, extension))
	{
		return;
	}

	// skip files that contain '.min'
	if (file.search('.min') > 0)
	{
		console.log(clc.underline('Skipping ' + '"' + file + '"\n'));
		return;
	}

	if (app.verbose)
	{
		switch (extension) {
		case 'jpg':
		case 'jpeg':
		case 'png':
			var message = 'Compressing';
		default:
			var message = 'Minifying';
		}

		console.log(clc.underline(message + ' "' + file + '"'));
	}

	// create the output filename
	var output = util.output(file, app);

	// grab the appropriate minifier
	var minifier = require('minify-minifiers')[extension];

	// hot sauce
	minifier(file, output, app);

	if (app.verbose)
	{
		var diff = stat.size - fs.statSync(output).size;
		console.log(clc.green('SAVED ') + output);
		console.log(clc.blue('INFO ') + 'file size reduced by ' + diff + 'B\n');
	}
	else
	{
		console.log(file + ':' + output);
	}
});
