#!/usr/bin/env node

// node modules
var fs = require('fs');

// npm modules
var app = require('commander');
var _ = require('underscore');
var clc = require('cli-color');
var shell = require('shelljs');

// app modules
var util = require('minify-util');
var hash = require('minify-hash').hash;

app
	.version('0.3.1')
	.option('-o, --output [path]', 'specify an output path (optional)')
	.option('-g, --git-hash', 'prepends the abbreviated git commit hash to the output filename')
	.option('-c, --content-hash', 'prepends an abbreviated hash based on the minified output')
	.option('-a, --append [string]', 'append a custom string to the output filename [.min]', '.min')
	.option('-v, --verbose', 'write verbose output', false)
	.option('--nophp', 'skip php files')
	.option('--nohtml', 'skip html files')
	.option('--nocss', 'skip css files')
	.option('--nojs', 'skip javascript files')
	.option('--nopng', 'skip png files')
	.option('--nojpeg', 'skip jpeg/jpg files')
	.option('--noimages', 'skip images');

// set version flag to lowercase
app.options[0].flags = '-v, --version';
app.options[0].short = '-v';

// parse cli arguments
app.parse(process.argv);

// set dirname
app.__dirname = __dirname;

// check for input files
if (app.args.length === 0) {
	console.log(clc.red('ERROR ') + 'you didn\'t select any files');
}

// check for command-line tools
_.each(['git', 'jpegtran', 'optipng'], function (prereq) {
	if ( shell.which(prereq) ) return;
	console.log('oops, please install ' + prereq);
	shell.exit(-1);
});

// --nomin requires an output to be set
if (app.nomin && ! app.output) {
	console.log(clc.red('ERROR ') + 'To use the --nomin flag you must set an output path.');
	shell.exit(-1);
}

var supported = ['js', 'css', 'php', 'html', 'png', 'jpeg', 'jpg'];

var skip = [];

if (app.nophp)    skip.push('php');
if (app.nohtml)   skip.push('html');
if (app.nocss)    skip.push('css');
if (app.nojs)     skip.push('js');
if (app.nopng)    skip.push('png');
if (app.nojpeg)   skip.push('jpeg', 'jpg');
if (app.noimages) skip.push('png', 'jpg', 'jpeg');

_.each(app.args, function (file) {

	try {
		var stat = fs.statSync(file);
		if (! stat.isFile()) {
			console.log(clc.red('ERROR ') + '"' + file + '" is an invalid file');
			return;
		}
	} catch (er) {
		console.log(clc.red('ERROR ') + '"' + file + '" is an invalid file');
		return;
	}

	var extension = _.last(file.split('.'));

	// check if we're manually skipping this filetype
	if (_.contains(skip, extension)) return;

	// skip files that contain '.min'
	if (file.search('.min') > 0) {
		console.log(clc.underline('Skipping ' + '"' + file + '"'));
		console.log('');
		return;
	}

	// make sure filetype is supported
	if (! _.contains(supported, extension)) return;

	// create the output filename
	var output = util.output(file, app);

	// grab the appropriate minifier
	var minifier = require('minify-minifiers')[extension];

	var message = 'Minifying';

	if (extension === 'jpeg' || extension === 'jpg' || extension === 'png') {
		var message = 'Compressing';
	}

	if (app.verbose)
	{
		console.log(clc.underline(message + ' "' + file + '"'));
	}

	// hot sauce
	minifier(file, output, app);

	// prepend content hash
	if (app['contentHash']) {
		var hashed = hash(output);
		shell.mv(output, hashed);
		output = hashed;
	}

	var diff = fs.statSync(file).size - fs.statSync(output).size;

	if (app.verbose)
	{
		console.log(clc.green('SAVED ') + output);
		console.log(clc.blue('INFO ') + 'file size reduced by ' + diff + 'B');
		console.log('');
	}
	else
	{
		console.log(output);
	}
});
